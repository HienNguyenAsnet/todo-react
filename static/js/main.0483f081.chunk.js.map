{"version":3,"sources":["reducers/todos.js","actions/index.js","reducers/filter.js","reducers/index.js","components/AddTodoForm/index.js","containers/AddTodo/index.js","components/Todo/index.styled.js","components/Todo/index.js","components/TodoList/index.js","containers/FilterableTodoList/index.js","components/Button/index.styled.js","components/Button/index.js","containers/FilterButton/index.js","components/FilterBar/index.js","App.js","serviceWorker.js","index.js"],"names":["todos","state","action","type","id","text","completed","map","todo","nextTodoId","FilterList","SHOW_ALL","SHOW_COMPLETED","SHOW_ACTIVE","filter","combineReducers","AddTodoForm","dispatch","input","createRef","onSubmit","e","preventDefault","value","current","trim","ref","AddTodo","connect","TodoItem","styled","li","props","css","Todo","onClick","handleClick","TodoList","toggleTodo","key","getVisibleTodos","t","Error","mapDispatchToProps","FilterableTodoList","ButtonStyled","button","Button","active","children","disabled","defaultTypes","FilterBotton","FilterBar","Object","values","FilterButton","store","createStore","rootReducer","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0483f081.chunk.js","sourcesContent":["const todos = (state = [], action) => {\n  switch (action.type) {\n    case 'ADD_TODO':\n      return [\n        ...state,\n        {\n          id: action.id,\n          text: action.text,\n          completed: false\n        }\n      ];\n    case 'TOGGLE_TODO':\n      return state.map(todo =>\n        (todo.id === action.id)\n          ? {...todo, completed: !todo.completed}\n          : todo\n      );\n    default:\n      return state;\n  }\n}\n\nexport default todos;\n","let nextTodoId = 1;\nexport const addTodo = text => ({\n  type: 'ADD_TODO',\n  id: nextTodoId++,\n  text\n})\n\nexport const setFilter = filter => ({\n  type: 'SET_FILTER',\n  filter\n})\n\nexport const toggleTodo = id => ({\n  type: 'TOGGLE_TODO',\n  id\n})\n\nexport const FilterList = {\n  SHOW_ALL: 'ALL',\n  SHOW_COMPLETED: 'COMPLETED',\n  SHOW_ACTIVE: 'ACTIVE'\n}","import { FilterList } from '../actions'\n\nconst filter = (state = FilterList.SHOW_ALL, action) => {\n  switch (action.type) {\n    case 'SET_FILTER':\n      return action.filter;\n    default:\n      return state;\n  }\n};\n\nexport default filter;\n","import { combineReducers } from 'redux'\nimport todos from './todos'\nimport filter from './filter'\n\nexport default combineReducers({\n  todos,\n  filter\n})\n","import React, { createRef } from \"react\";\nimport { addTodo } from '../../actions';\nimport PropTypes from 'prop-types';\n\nconst AddTodoForm = ({ dispatch }) => {\n  let input = createRef();\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n    const value = input.current.value;\n\n    if (!value.trim()) {\n      return;\n    }\n\n    dispatch(addTodo(value));\n    input.current.value = '';\n  };\n\n  return (\n    <div>\n      <form onSubmit={onSubmit}>\n        <input type=\"text\" ref={input} />\n        <button type=\"submit\">\n          Add Todo\n        </button>\n      </form>\n    </div>\n  );\n}\n\nAddTodoForm.propTypes = {\n  dispatch: PropTypes.func\n};\n\nexport default AddTodoForm;\n","import { connect } from 'react-redux';\nimport AddTodoForm from '../../components/AddTodoForm';\n\nconst AddTodo = connect()(AddTodoForm);\n\nexport default AddTodo;","import styled, { css } from 'styled-components'\n\nconst TodoItem = styled.li`\n  ${props => props.completed && css`text-decoration: line-through;`}\n`;\n\nexport { TodoItem };","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { TodoItem } from './index.styled'\n\nconst Todo = ({\n  onClick,\n  completed,\n  id,\n  text\n}) => {\n  const handleClick = () => {\n    onClick(id);\n  }\n\n  const render = () => {\n    return (\n      <TodoItem completed={completed} onClick={handleClick}>{text}</TodoItem>\n    )\n  };\n\n  return render();\n}\n\nTodo.propTypes = {\n  onClick: PropTypes.func.isRequired,\n  completed: PropTypes.bool.isRequired,\n  text: PropTypes.string.isRequired,\n  id: PropTypes.number.isRequired\n}\n\nexport default Todo;","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Todo from '../Todo'\n\nconst TodoList = ({\n  todos,\n  toggleTodo\n}) => (\n  <ul>\n    {todos.map(todo =>\n      <Todo\n        key={todo.id}\n        {...todo}\n        onClick={toggleTodo}\n      />\n    )}\n  </ul>\n)\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      completed: PropTypes.bool.isRequired,\n      text: PropTypes.string.isRequired\n    }).isRequired\n  ).isRequired,\n  toggleTodo: PropTypes.func.isRequired\n}\n\nexport default TodoList;\n","import { connect } from 'react-redux'\nimport { toggleTodo, FilterList } from '../../actions'\nimport TodoList from '../../components/TodoList'\n\nconst getVisibleTodos = (todos, filter) => {\n  switch (filter) {\n    case FilterList.SHOW_ALL:\n      return todos\n    case FilterList.SHOW_COMPLETED:\n      return todos.filter(t => t.completed)\n    case FilterList.SHOW_ACTIVE:\n      return todos.filter(t => !t.completed)\n    default:\n      throw new Error('Unknown filter: ' + filter)\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    todos: getVisibleTodos(state.todos, state.filter)\n  }\n}\n\nconst mapDispatchToProps = {\n  toggleTodo: id => toggleTodo(id)\n}\n\nconst FilterableTodoList = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(TodoList);\n\nexport default FilterableTodoList;","import styled from 'styled-components'\n\nconst ButtonStyled = styled.button`\n  margin-left: 5px;\n`;\n\nexport { ButtonStyled };","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { ButtonStyled } from './index.styled';\n\nconst Button = ({\n  active,\n  children,\n  onClick\n}) => (\n  /**\n   * Can't change state if it's active\n   */\n  <ButtonStyled onClick={onClick} disabled={active}>\n    {children}\n  </ButtonStyled>\n)\n\nButton.propTypes = {\n  active: PropTypes.bool,\n  children: PropTypes.node.isRequired,\n  onClick: PropTypes.func.isRequired\n}\n\nButton.defaultTypes = {\n  active: false\n}\n\nexport default Button;\n","import { connect } from 'react-redux';\nimport Button from '../../components/Button';\nimport { setFilter } from '../../actions';\n\nconst mapStateToProps = (state, props) => ({\n  active: props.filter === state.filter\n});\n\nconst mapDispatchToProps = (dispatch, props) => ({\n  onClick: () => dispatch(setFilter(props.filter))\n});\n\nconst FilterBotton = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Button)\n\nexport default FilterBotton;","import React from 'react'\nimport FilterButton from '../../containers/FilterButton'\nimport { FilterList } from '../../actions'\n\nconst FilterBar = () => (\n  <div>\n    {Object.values(FilterList).map((filter) => (\n      <FilterButton key={filter} filter={filter}>{filter}</FilterButton>\n    ))}\n  </div>\n)\n\nexport default FilterBar;\n","import React from 'react';\nimport './App.css';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport rootReducer from './reducers';\nimport AddTodo from './containers/AddTodo';\nimport FilterableTodoList from './containers/FilterableTodoList';\nimport FilterBar from './components/FilterBar';\n\nconst store = createStore(rootReducer);\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <AddTodo />\n      <FilterableTodoList />\n      <FilterBar />\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}